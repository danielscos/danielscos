name: Test Hackatime API Parameters

on:
  workflow_dispatch: # Manual trigger only

jobs:
  test-api-params:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Different API Parameters
        run: |
          echo "=== Testing Hackatime API with Different Parameters ==="

          API_KEY="${{ secrets.WAKATIME_API_KEY }}"
          BASE_URL="https://hackatime.hackclub.com/api/hackatime/v1"
          ENDPOINT="users/current/stats/last_7_days"

          echo "Base URL: $BASE_URL"
          echo "Testing endpoint: $ENDPOINT"
          echo ""

          # Test different parameter combinations
          PARAM_SETS=(
            ""
            "?refresh=true"
            "?include_today=true"
            "?force_update=true"
            "?cache=false"
            "?refresh=true&include_today=true"
            "?force_update=true&include_today=true"
            "?refresh=true&cache=false"
            "?timeout=60"
            "?project=osint-news-channel"
            "?detailed=true"
            "?full=true"
            "?complete=true"
            "?real_time=true"
            "?live=true"
            "?updated=true"
          )

          for params in "${PARAM_SETS[@]}"; do
            echo "=========================================="
            echo "Testing: $ENDPOINT$params"
            echo "=========================================="

            full_url="$BASE_URL/$ENDPOINT$params"

            response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: Bearer $API_KEY" \
              -H "Cache-Control: no-cache" \
              -H "Pragma: no-cache" \
              "$full_url" 2>/dev/null || echo "CURL_ERROR")

            http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')

            echo "Status: $http_status"

            if [ "$http_status" = "200" ]; then
              # Extract key metrics
              total_seconds=$(echo "$body" | jq -r '.data.total_seconds // empty' 2>/dev/null || echo "N/A")
              human_total=$(echo "$body" | jq -r '.data.human_readable_total // empty' 2>/dev/null || echo "N/A")
              is_up_to_date=$(echo "$body" | jq -r '.data.is_up_to_date // empty' 2>/dev/null || echo "N/A")
              percent_calculated=$(echo "$body" | jq -r '.data.percent_calculated // empty' 2>/dev/null || echo "N/A")

              echo "  Total Seconds: $total_seconds"
              echo "  Human Total: $human_total"
              echo "  Is Up To Date: $is_up_to_date"
              echo "  Percent Calculated: $percent_calculated%"

              # Check osint-news-channel specifically
              osint_seconds=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .total_seconds' 2>/dev/null || echo "N/A")
              osint_text=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .text' 2>/dev/null || echo "N/A")

              echo "  osint-news-channel: $osint_text ($osint_seconds seconds)"

              # Check if this gives us the expected data
              if [ "$osint_seconds" != "N/A" ] && [ "$osint_seconds" -gt 15000 ]; then
                echo "  üéØ POTENTIAL MATCH! osint-news-channel has $osint_seconds seconds (expected ~17280)"
              elif [ "$osint_seconds" != "N/A" ] && [ "$osint_seconds" -gt 8576 ]; then
                echo "  üìà IMPROVEMENT! osint-news-channel increased from 8576 to $osint_seconds seconds"
              fi

              # Check total project seconds sum
              project_sum=$(echo "$body" | jq -r '[.data.projects[]?.total_seconds] | add' 2>/dev/null || echo "N/A")
              echo "  Project Sum: $project_sum seconds"

              if [ "$project_sum" != "N/A" ] && [ "$total_seconds" != "N/A" ]; then
                missing=$((total_seconds - project_sum))
                echo "  Missing Time: $missing seconds"
                if [ $missing -lt 5000 ]; then
                  echo "  ‚úÖ GOOD! Low missing time"
                fi
              fi

            else
              echo "  ‚ùå Failed with status $http_status"
              if [ "$body" != "CURL_ERROR" ]; then
                echo "  Error: $(echo "$body" | head -c 100)..."
              fi
            fi
            echo ""
          done

          echo ""
          echo "=== Testing Alternative Headers ==="

          # Test with different headers that might affect caching
          HEADERS_TESTS=(
            "-H 'Cache-Control: no-cache, no-store, must-revalidate'"
            "-H 'Pragma: no-cache'"
            "-H 'Expires: 0'"
            "-H 'User-Agent: markscribe/1.0'"
            "-H 'Accept: application/json'"
            "-H 'X-Force-Refresh: true'"
            "-H 'X-Real-Time: true'"
          )

          for headers in "${HEADERS_TESTS[@]}"; do
            echo "Testing with headers: $headers"

            response=$(eval "curl -s -w 'HTTP_STATUS:%{http_code}' \
              -H 'Authorization: Bearer $API_KEY' \
              $headers \
              '$BASE_URL/$ENDPOINT' 2>/dev/null" || echo "CURL_ERROR")

            http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')

            if [ "$http_status" = "200" ]; then
              osint_seconds=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .total_seconds' 2>/dev/null || echo "N/A")
              echo "  osint-news-channel: $osint_seconds seconds"
            else
              echo "  ‚ùå Failed: $http_status"
            fi
          done

          echo ""
          echo "=== Summary ==="
          echo "Look for any parameter combination that shows:"
          echo "- osint-news-channel with ~17280 seconds (4h 48m)"
          echo "- Total seconds matching project sum (minimal missing time)"
          echo "- is_up_to_date: true"
          echo "- percent_calculated: 100"
