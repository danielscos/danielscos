name: Update Hackatime Stats

on:
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install requests

      - name: Update README with Hackatime stats
        env:
          HACKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
          HACKATIME_API_URL: "https://hackatime.hackclub.com/api/hackatime/v1"
        run: |
          python3 << 'EOF'
          import requests
          import os
          import json
          from datetime import datetime, timedelta

          def fetch_hackatime_data():
              api_key = os.environ.get('HACKATIME_API_KEY')
              api_url = os.environ.get('HACKATIME_API_URL')

              if not api_key or not api_url:
                  print("Missing API key or URL")
                  return None

              headers = {
                  'Authorization': f'Bearer {api_key}',
                  'Content-Type': 'application/json'
              }

              # Get stats for the last 7 days
              end_date = datetime.now()
              start_date = end_date - timedelta(days=7)

              try:
                  # Try different endpoints that might be available
                  endpoints = [
                      f'{api_url}/users/current/stats/last_7_days',
                      f'{api_url}/users/current/summaries',
                      f'{api_url}/users/current/stats'
                  ]

                  for endpoint in endpoints:
                      try:
                          response = requests.get(endpoint, headers=headers, timeout=10)
                          if response.status_code == 200:
                              return response.json()
                      except Exception as e:
                          continue

                  print("No valid endpoint found")
                  return None

              except Exception as e:
                  print(f"Error fetching data: {e}")
                  return None

          def format_time(seconds):
              if seconds < 3600:
                  return f"{int(seconds // 60)} mins"
              else:
                  hours = int(seconds // 3600)
                  minutes = int((seconds % 3600) // 60)
                  if minutes > 0:
                      return f"{hours} hrs {minutes} mins"
                  return f"{hours} hrs"

          def generate_stats_content(data):
              if not data:
                  return """üìä **This Week's Coding Time:**

          ```text
          No data available - Make sure Hackatime is tracking your coding time!
          ```

          üîó **Powered by [Hackatime](https://hackatime.hackclub.com)** - Hack Club's coding time tracker"""

              content = "üìä **This Week's Coding Time:** \n\n"

              # Try to extract meaningful data from whatever format we get
              if isinstance(data, dict):
                  # Look for common fields
                  total_seconds = data.get('total_seconds', 0)
                  if total_seconds:
                      content += f"‚è±Ô∏è **Total:** {format_time(total_seconds)}\n\n"

                  # Languages
                  languages = data.get('languages', [])
                  if languages:
                      content += "üíª **Languages:**\n```text\n"
                      for lang in languages[:5]:  # Top 5
                          name = lang.get('name', 'Unknown')
                          time = lang.get('total_seconds', 0)
                          percent = lang.get('percent', 0)
                          content += f"{name:<12} {format_time(time):>10} ({percent:.1f}%)\n"
                      content += "```\n\n"

                  # Projects
                  projects = data.get('projects', [])
                  if projects:
                      content += "üìÅ **Projects:**\n```text\n"
                      for proj in projects[:5]:  # Top 5
                          name = proj.get('name', 'Unknown')
                          time = proj.get('total_seconds', 0)
                          percent = proj.get('percent', 0)
                          content += f"{name:<12} {format_time(time):>10} ({percent:.1f}%)\n"
                      content += "```\n\n"

              content += "üîó **Powered by [Hackatime](https://hackatime.hackclub.com)** - Hack Club's coding time tracker"
              return content

          def update_readme():
              try:
                  # Fetch data
                  data = fetch_hackatime_data()
                  stats_content = generate_stats_content(data)

                  # Read current README
                  with open('README.md', 'r') as f:
                      readme_content = f.read()

                  # Find and replace the waka section
                  start_marker = '<!--START_SECTION:waka-->'
                  end_marker = '<!--END_SECTION:waka-->'

                  start_index = readme_content.find(start_marker)
                  end_index = readme_content.find(end_marker)

                  if start_index == -1 or end_index == -1:
                      print("Markers not found in README")
                      return

                  # Replace content between markers
                  new_content = (
                      readme_content[:start_index + len(start_marker)] +
                      '\n' + stats_content + '\n' +
                      readme_content[end_index:]
                  )

                  # Write updated README
                  with open('README.md', 'w') as f:
                      f.write(new_content)

                  print("README updated successfully!")

              except Exception as e:
                  print(f"Error updating README: {e}")

          if __name__ == "__main__":
              update_readme()
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üìä Update coding stats"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
