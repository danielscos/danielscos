name: Test Date Ranges for Hackatime

on:
  workflow_dispatch: # Manual trigger only

jobs:
  test-date-ranges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Different Date Ranges
        run: |
          echo "=== Testing Different Date Ranges for Hackatime API ==="

          API_KEY="${{ secrets.WAKATIME_API_KEY }}"
          BASE_URL="https://hackatime.hackclub.com/api/hackatime/v1"

          # Get current date in different formats
          TODAY=$(date -u +%Y-%m-%d)
          YESTERDAY=$(date -u -d "1 day ago" +%Y-%m-%d)
          WEEK_AGO=$(date -u -d "7 days ago" +%Y-%m-%d)
          WEEK_AGO_6=$(date -u -d "6 days ago" +%Y-%m-%d)
          TWO_WEEKS_AGO=$(date -u -d "14 days ago" +%Y-%m-%d)

          echo "Current Date (UTC): $TODAY"
          echo "Yesterday: $YESTERDAY"
          echo "7 days ago: $WEEK_AGO"
          echo "6 days ago: $WEEK_AGO_6"
          echo ""

          # Test different date range combinations
          DATE_RANGES=(
            # Current API range (what we're getting wrong data from)
            "stats/last_7_days||Current API Range"

            # Try different relative ranges
            "stats/last_30_days||Last 30 Days"
            "stats/last_6_months||Last 6 Months"

            # Try summaries with different date ranges
            "summaries?start=$WEEK_AGO&end=$TODAY||7 days ago to today"
            "summaries?start=$WEEK_AGO_6&end=$TODAY||6 days ago to today"
            "summaries?start=$WEEK_AGO&end=$YESTERDAY||7 days ago to yesterday"
            "summaries?start=$TWO_WEEKS_AGO&end=$TODAY||14 days ago to today"

            # Try different end times for today
            "summaries?start=$WEEK_AGO&end=${TODAY}T23:59:59||7 days to end of today"
            "summaries?start=$WEEK_AGO_6&end=${TODAY}T23:59:59||6 days to end of today"

            # Try with specific timezone
            "summaries?start=$WEEK_AGO&end=$TODAY&timezone=Europe/Rome||7 days with timezone"
            "summaries?start=$WEEK_AGO&end=$TODAY&timezone=UTC||7 days UTC"

            # Try with additional parameters
            "summaries?start=$WEEK_AGO&end=$TODAY&include_today=true||Include today flag"
            "summaries?range=last_7_days||Range parameter"
            "summaries?range=last_7_days&include_today=true||Range with include today"
          )

          for range_info in "${DATE_RANGES[@]}"; do
            endpoint=$(echo "$range_info" | cut -d'|' -f1)
            description=$(echo "$range_info" | cut -d'|' -f3)

            echo "=========================================="
            echo "Testing: $description"
            echo "Endpoint: users/current/$endpoint"
            echo "=========================================="

            full_url="$BASE_URL/users/current/$endpoint"

            response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: Bearer $API_KEY" \
              -H "Cache-Control: no-cache" \
              "$full_url" 2>/dev/null || echo "CURL_ERROR")

            http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')

            echo "Status: $http_status"

            if [ "$http_status" = "200" ]; then
              # Extract key metrics
              total_seconds=$(echo "$body" | jq -r '.data.total_seconds // empty' 2>/dev/null || echo "N/A")
              human_total=$(echo "$body" | jq -r '.data.human_readable_total // empty' 2>/dev/null || echo "N/A")
              start_date=$(echo "$body" | jq -r '.data.start // empty' 2>/dev/null || echo "N/A")
              end_date=$(echo "$body" | jq -r '.data.end // empty' 2>/dev/null || echo "N/A")
              is_up_to_date=$(echo "$body" | jq -r '.data.is_up_to_date // empty' 2>/dev/null || echo "N/A")

              echo "  Total: $human_total ($total_seconds seconds)"
              echo "  Period: $start_date to $end_date"
              echo "  Up to date: $is_up_to_date"

              # Check osint-news-channel specifically
              osint_seconds=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .total_seconds' 2>/dev/null || echo "0")
              osint_text=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .text' 2>/dev/null || echo "Not found")
              osint_percent=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .percent' 2>/dev/null || echo "0")

              echo "  osint-news-channel: $osint_text ($osint_seconds seconds, $osint_percent%)"

              # Check if this matches expected values (4h 48m = ~17280 seconds)
              if [ "$osint_seconds" -gt 15000 ]; then
                echo "  üéØ POTENTIAL MATCH! osint-news-channel has $osint_seconds seconds"
                echo "  üéØ Expected ~17280 seconds (4h 48m), got $osint_seconds"
                if [ "$osint_seconds" -gt 17000 ]; then
                  echo "  ‚úÖ VERY CLOSE TO EXPECTED VALUE!"
                fi
              elif [ "$osint_seconds" -gt 10000 ]; then
                echo "  üìà BETTER than current 8576 seconds"
              elif [ "$osint_seconds" -eq 8576 ]; then
                echo "  ‚ö†Ô∏è  Same as current API (8576 seconds)"
              else
                echo "  ‚ùå Lower than current API"
              fi

              # Check project sum vs total
              project_sum=$(echo "$body" | jq -r '[.data.projects[]?.total_seconds] | add' 2>/dev/null || echo "0")
              if [ "$total_seconds" != "N/A" ] && [ "$project_sum" -gt 0 ]; then
                missing=$((total_seconds - project_sum))
                missing_percent=$((missing * 100 / total_seconds))
                echo "  Missing time: $missing seconds ($missing_percent% of total)"
              fi

            else
              echo "  ‚ùå Failed with status $http_status"
            fi
            echo ""
          done

          echo ""
          echo "=== Testing Today vs Yesterday Boundaries ==="

          # Test different hour boundaries for "today"
          HOUR_TESTS=(
            "${TODAY}T00:00:00||Start of today"
            "${TODAY}T06:00:00||6 AM today"
            "${TODAY}T12:00:00||Noon today"
            "${TODAY}T18:00:00||6 PM today"
            "${TODAY}T23:59:59||End of today"
          )

          for hour_test in "${HOUR_TESTS[@]}"; do
            end_time=$(echo "$hour_test" | cut -d'|' -f1)
            desc=$(echo "$hour_test" | cut -d'|' -f3)

            echo "Testing 7-day range ending at: $desc"

            response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: Bearer $API_KEY" \
              "$BASE_URL/users/current/summaries?start=$WEEK_AGO&end=$end_time" 2>/dev/null || echo "CURL_ERROR")

            http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')

            if [ "$http_status" = "200" ]; then
              osint_seconds=$(echo "$body" | jq -r '.data.projects[]? | select(.name=="osint-news-channel") | .total_seconds' 2>/dev/null || echo "0")
              total_seconds=$(echo "$body" | jq -r '.data.total_seconds // 0' 2>/dev/null)
              echo "  osint-news-channel: $osint_seconds seconds | Total: $total_seconds seconds"
            else
              echo "  ‚ùå Failed: $http_status"
            fi
          done

          echo ""
          echo "=== Summary ==="
          echo "Look for any date range that shows osint-news-channel with ~17280 seconds (4h 48m)"
          echo "Current API shows: 8576 seconds (2h 22m)"
          echo "Expected from dashboard: ~17280 seconds (4h 48m)"
